name: Continuous Integration

# Defines when the workflow will run
on:
  # Trigger on push events to the main branch
  push:
    branches: [ main ]
  # Trigger on pull request events targeting the main branch
  pull_request:
    branches: [ main ]
  # Allow manual triggering of the workflow
  workflow_dispatch:

# Environment variables used across the workflow jobs
env:
  PYTHON_VERSION: "3.9"
  # Cache key for uv dependencies (change version to invalidate cache)
  UV_CACHE_KEY: "v1"

jobs:
  # First job: Lint the code
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Step 2: Set up Python with the specified version
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'  # Cache pip dependencies
      
      # Step 3: Install uv package manager
      - name: Install uv
        run: |
          pip install uv
      
      # Step 4: Cache uv dependencies to speed up future runs
      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ env.UV_CACHE_KEY }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ env.UV_CACHE_KEY }}-
      
      # Step 5: Install development dependencies using uv
      - name: Install dependencies
        run: |
          uv pip install -r requirements-dev.txt
      
      # Step 6: Run black formatter with check flag
      - name: Check formatting with black
        run: |
          black --check .
      
      # Step 7: Run isort import formatter with check flag
      - name: Check imports with isort
        run: |
          isort --check-only --profile black .
      
      # Step 8: Run mypy type checker
      - name: Check types with mypy
        run: |
          mypy src/
  
  # Second job: Run tests with pytest
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    # This job starts after the lint job completes successfully
    needs: lint
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Step 2: Set up Python with the specified version
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      # Step 3: Install uv package manager
      - name: Install uv
        run: |
          pip install uv
      
      # Step 4: Cache uv dependencies to speed up future runs
      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ env.UV_CACHE_KEY }}-${{ hashFiles('requirements-test.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ env.UV_CACHE_KEY }}-
      
      # Step 5: Install test dependencies using uv
      - name: Install dependencies
        run: |
          uv pip install -r requirements-test.txt
      
      # Step 6: Run tests with pytest and generate coverage report
      - name: Test with pytest
        run: |
          pytest --cov=src tests/ --cov-report=xml
      
      # Step 7: Upload coverage report to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          flags: pytest
          name: codecov-umbrella
          verbose: true
  
  # Third job: Verify documentation builds correctly
  docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    # This job runs in parallel with the test job after lint completes
    needs: lint
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Step 2: Set up Python with the specified version
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      # Step 3: Install uv package manager
      - name: Install uv
        run: |
          pip install uv
      
      # Step 4: Install documentation dependencies
      - name: Install dependencies
        run: |
          uv pip install -r requirements-dev.txt
      
      # Step 5: Build documentation (using mkdocs if configured)
      - name: Build documentation
        run: |
          # Use script included in project, or install and run mkdocs directly
          if [ -f "docs/build.sh" ]; then
            bash docs/build.sh
          else
            mkdocs build
          fi

